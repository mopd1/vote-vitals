"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = handler;
const bills_1 = require("./lib/api/bills");
const members_1 = require("./lib/api/members");
const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token',
    'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
};
async function handler(event) {
    try {
        if (event.httpMethod === 'OPTIONS') {
            return { statusCode: 200, headers: corsHeaders, body: '' };
        }
        const path = event.path.toLowerCase();
        const params = event.queryStringParameters || {};
        if (path.includes('/health')) {
            return {
                statusCode: 200,
                headers: { ...corsHeaders, 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    status: 'ok',
                    timestamp: new Date().toISOString(),
                    environment: {
                        region: process.env.REGION,
                        billsTable: process.env.DYNAMODB_BILLS_TABLE,
                        membersTable: process.env.DYNAMODB_MEMBERS_TABLE,
                        cacheBucket: process.env.S3_CACHE_BUCKET,
                        nodeEnv: process.env.NODE_ENV
                    }
                })
            };
        }
        if (path.includes('/api/parliament/members')) {
            if (path.endsWith('/members')) {
                const members = await members_1.membersService.getMembers({
                    party: params.party,
                    house: params.house,
                    page: params.page ? parseInt(params.page) : undefined,
                    limit: params.limit ? parseInt(params.limit) : undefined
                });
                return {
                    statusCode: 200,
                    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
                    body: JSON.stringify(members)
                };
            }
            const memberId = path.split('/').pop();
            if (memberId) {
                const member = await members_1.membersService.getMemberById(memberId);
                return {
                    statusCode: member ? 200 : 404,
                    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
                    body: member ? JSON.stringify(member) : JSON.stringify({ error: 'Member not found' })
                };
            }
        }
        if (path.includes('/api/parliament/bills')) {
            const bills = await bills_1.billsService.getBills({
                page: params.page ? parseInt(params.page) : undefined,
                limit: params.limit ? parseInt(params.limit) : undefined,
                sessionId: params.sessionId ? parseInt(params.sessionId) : undefined
            });
            return {
                statusCode: 200,
                headers: { ...corsHeaders, 'Content-Type': 'application/json' },
                body: JSON.stringify(bills)
            };
        }
        return {
            statusCode: 404,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            body: JSON.stringify({ error: 'Not found', path })
        };
    }
    catch (error) {
        console.error('Error:', error);
        return {
            statusCode: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            body: JSON.stringify({
                error: 'Internal server error',
                message: error instanceof Error ? error.message : 'Unknown error'
            })
        };
    }
}
//# sourceMappingURL=data:application/json;base64,