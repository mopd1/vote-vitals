"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.billsService = exports.BillsService = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client_s3_1 = require("@aws-sdk/client-s3");
const utils_1 = require("./utils");
const logger_1 = require("../utils/logger");
const dynamoClient = new client_dynamodb_1.DynamoDBClient({ region: process.env.REGION });
const dynamoDB = lib_dynamodb_1.DynamoDBDocument.from(dynamoClient);
const s3Client = new client_s3_1.S3Client({ region: process.env.REGION });
const BILLS_TABLE = process.env.DYNAMODB_BILLS_TABLE;
const CACHE_BUCKET = process.env.S3_CACHE_BUCKET;
const CACHE_DURATION = 60 * 60; // 1 hour in seconds
const PARLIAMENT_API_URL = 'https://bills-api.parliament.uk/api/v1';
class BillsService {
    async getBills(params) {
        const cacheKey = `bills/${params.sessionId}/${params.page}/${params.limit}`;
        try {
            // Try S3 cache first
            const cachedData = await this.getFromCache(cacheKey);
            if (cachedData) {
                logger_1.logger.info('Cache hit - returning cached data');
                return cachedData;
            }
        }
        catch (err) {
            logger_1.logger.warn('Cache miss or error', { error: err });
        }
        // Try DynamoDB next
        try {
            const dynamoData = await this.getFromDynamo(params);
            if (dynamoData) {
                await this.setCache(cacheKey, dynamoData);
                return dynamoData;
            }
        }
        catch (err) {
            logger_1.logger.warn('DynamoDB error', { error: err });
        }
        // Finally, fetch from Parliament API
        try {
            const apiData = await this.fetchFromAPI(params);
            await Promise.all([
                this.setCache(cacheKey, apiData),
                this.storeBills(apiData.items)
            ]).catch(err => {
                logger_1.logger.error('Error storing fetched data', { error: err });
            });
            return apiData;
        }
        catch (err) {
            logger_1.logger.error('Error fetching from Parliament API', { error: err });
            throw err;
        }
    }
    async getFromCache(key) {
        try {
            const result = await s3Client.send(new client_s3_1.GetObjectCommand({
                Bucket: CACHE_BUCKET,
                Key: key
            }));
            const bodyContents = await result.Body?.transformToString();
            if (bodyContents) {
                const data = JSON.parse(bodyContents);
                if (Date.now() < data.expiresAt) {
                    return data.content;
                }
            }
        }
        catch (err) {
            logger_1.logger.debug('Cache miss', { error: err });
        }
        return null;
    }
    async setCache(key, data) {
        const cacheData = {
            content: data,
            expiresAt: Date.now() + (CACHE_DURATION * 1000)
        };
        await s3Client.send(new client_s3_1.PutObjectCommand({
            Bucket: CACHE_BUCKET,
            Key: key,
            Body: JSON.stringify(cacheData),
            ContentType: 'application/json'
        }));
    }
    async getFromDynamo(params) {
        const { page = 1, limit = 20, sessionId = 58 } = params;
        try {
            const queryResult = await dynamoDB.send(new lib_dynamodb_1.QueryCommand({
                TableName: BILLS_TABLE,
                KeyConditionExpression: 'PK = :pk',
                ExpressionAttributeValues: {
                    ':pk': `SESSION#${sessionId}`
                },
                Limit: limit,
                ScanIndexForward: true
            }));
            if (!queryResult.Items || queryResult.Items.length === 0) {
                return null;
            }
            const bills = queryResult.Items.map((item) => ({
                billId: parseInt(item.SK.split('#')[1]),
                title: item.title,
                currentHouse: item.currentHouse,
                originatingHouse: item.originatingHouse,
                lastUpdate: item.lastUpdate,
                sessionId: item.sessionId,
                billTypeId: item.billTypeId,
                isDefeated: item.isDefeated,
                billWithdrawn: item.billWithdrawn
            }));
            return {
                items: bills,
                totalItems: queryResult.Count || 0,
                pageNumber: page,
                pageSize: limit,
                totalPages: Math.ceil((queryResult.Count || 0) / limit)
            };
        }
        catch (err) {
            logger_1.logger.error('DynamoDB query error', { error: err });
            return null;
        }
    }
    async storeBills(bills) {
        try {
            const putRequests = bills.map(bill => ({
                TableName: BILLS_TABLE,
                Item: this.mapBillToDynamoDB(bill)
            }));
            await Promise.all(putRequests.map(request => dynamoDB.send(new lib_dynamodb_1.PutCommand(request))));
        }
        catch (err) {
            logger_1.logger.error('Error storing bills in DynamoDB', { error: err });
        }
    }
    async fetchFromAPI(params) {
        const { page = 1, limit = 20, sessionId = 58 } = params;
        try {
            logger_1.logger.info('Fetching from Parliament API', { params });
            const data = await (0, utils_1.fetchWithRateLimit)(`${PARLIAMENT_API_URL}/Bills`, {
                params: {
                    take: limit,
                    skip: (page - 1) * limit,
                    SessionId: sessionId
                }
            });
            // Transform the API response to our Bill type
            const bills = data.items.map((item) => ({
                billId: item.billId,
                title: item.shortTitle,
                currentHouse: item.currentHouse,
                originatingHouse: item.originatingHouse,
                lastUpdate: item.lastUpdate,
                sessionId: item.sessionId,
                billTypeId: item.billTypeId,
                isDefeated: item.isDefeated,
                billWithdrawn: item.billWithdrawn
            }));
            return {
                items: bills,
                totalItems: data.totalResults,
                pageNumber: page,
                pageSize: limit,
                totalPages: Math.ceil(data.totalResults / limit)
            };
        }
        catch (err) {
            logger_1.logger.error('Error fetching from Parliament API', {
                error: err,
                params
            });
            throw new Error('Failed to fetch bills from Parliament API');
        }
    }
    mapBillToDynamoDB(bill) {
        return {
            PK: `SESSION#${bill.sessionId}`,
            SK: `BILL#${bill.billId}`,
            GSI1PK: `BILL_TYPE#${bill.billTypeId}`,
            GSI1SK: bill.lastUpdate,
            ...bill,
            ttl: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60) // 7 days TTL
        };
    }
}
exports.BillsService = BillsService;
exports.billsService = new BillsService();
//# sourceMappingURL=data:application/json;base64,