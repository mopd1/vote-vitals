"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client_s3_1 = require("@aws-sdk/client-s3");
const dynamoClient = new client_dynamodb_1.DynamoDBClient({
    region: "local",
    endpoint: "http://localhost:8000",
    credentials: {
        accessKeyId: "local",
        secretAccessKey: "local",
    },
});
const dynamoDB = lib_dynamodb_1.DynamoDBDocument.from(dynamoClient);
const s3Client = new client_s3_1.S3Client({
    region: "local",
    endpoint: "http://localhost:9000",
    credentials: {
        accessKeyId: "local",
        secretAccessKey: "local",
    },
    forcePathStyle: true,
});
async function localTest() {
    try {
        // Test DynamoDB connection
        await dynamoDB.scan({
            TableName: process.env.DYNAMODB_BILLS_TABLE || "uk-politics-bills-local",
        });
        console.log("Successfully connected to local DynamoDB");
        // Test S3 connection
        await s3Client.send(new client_s3_1.ListObjectsV2Command({
            Bucket: process.env.S3_CACHE_BUCKET || "uk-politics-cache-local"
        }));
        console.log("Successfully connected to local S3");
    }
    catch (err) {
        console.error("Error connecting to local services:", err);
        throw err;
    }
}
// Set local environment variables
process.env.REGION = 'eu-west-2';
process.env.DYNAMODB_BILLS_TABLE = 'uk-politics-bills-local';
process.env.DYNAMODB_MEMBERS_TABLE = 'uk-politics-members-local';
process.env.S3_CACHE_BUCKET = 'uk-politics-cache-local';
process.env.LOG_LEVEL = 'debug';
localTest().catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbG9jYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4REFBMEQ7QUFDMUQsd0RBQXlEO0FBQ3pELGtEQUFvRTtBQUVwRSxNQUFNLFlBQVksR0FBRyxJQUFJLGdDQUFjLENBQUM7SUFDdEMsTUFBTSxFQUFFLE9BQU87SUFDZixRQUFRLEVBQUUsdUJBQXVCO0lBQ2pDLFdBQVcsRUFBRTtRQUNYLFdBQVcsRUFBRSxPQUFPO1FBQ3BCLGVBQWUsRUFBRSxPQUFPO0tBQ3pCO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsTUFBTSxRQUFRLEdBQUcsK0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRXJELE1BQU0sUUFBUSxHQUFHLElBQUksb0JBQVEsQ0FBQztJQUM1QixNQUFNLEVBQUUsT0FBTztJQUNmLFFBQVEsRUFBRSx1QkFBdUI7SUFDakMsV0FBVyxFQUFFO1FBQ1gsV0FBVyxFQUFFLE9BQU87UUFDcEIsZUFBZSxFQUFFLE9BQU87S0FDekI7SUFDRCxjQUFjLEVBQUUsSUFBSTtDQUNyQixDQUFDLENBQUM7QUFFSCxLQUFLLFVBQVUsU0FBUztJQUN0QixJQUFJLENBQUM7UUFDSCwyQkFBMkI7UUFDM0IsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ2xCLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixJQUFJLHlCQUF5QjtTQUN6RSxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFFeEQscUJBQXFCO1FBQ3JCLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLGdDQUFvQixDQUFDO1lBQzNDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSx5QkFBeUI7U0FDakUsQ0FBQyxDQUFDLENBQUM7UUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzFELE1BQU0sR0FBRyxDQUFDO0lBQ1osQ0FBQztBQUNILENBQUM7QUFFRCxrQ0FBa0M7QUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDO0FBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEdBQUcseUJBQXlCLENBQUM7QUFDN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsR0FBRywyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsR0FBRyx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7QUFFaEMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtb0RCQ2xpZW50IH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuaW1wb3J0IHsgRHluYW1vREJEb2N1bWVudCB9IGZyb20gXCJAYXdzLXNkay9saWItZHluYW1vZGJcIjtcbmltcG9ydCB7IFMzQ2xpZW50LCBMaXN0T2JqZWN0c1YyQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtczNcIjtcblxuY29uc3QgZHluYW1vQ2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHtcbiAgcmVnaW9uOiBcImxvY2FsXCIsXG4gIGVuZHBvaW50OiBcImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMFwiLFxuICBjcmVkZW50aWFsczoge1xuICAgIGFjY2Vzc0tleUlkOiBcImxvY2FsXCIsXG4gICAgc2VjcmV0QWNjZXNzS2V5OiBcImxvY2FsXCIsXG4gIH0sXG59KTtcblxuY29uc3QgZHluYW1vREIgPSBEeW5hbW9EQkRvY3VtZW50LmZyb20oZHluYW1vQ2xpZW50KTtcblxuY29uc3QgczNDbGllbnQgPSBuZXcgUzNDbGllbnQoe1xuICByZWdpb246IFwibG9jYWxcIixcbiAgZW5kcG9pbnQ6IFwiaHR0cDovL2xvY2FsaG9zdDo5MDAwXCIsXG4gIGNyZWRlbnRpYWxzOiB7XG4gICAgYWNjZXNzS2V5SWQ6IFwibG9jYWxcIixcbiAgICBzZWNyZXRBY2Nlc3NLZXk6IFwibG9jYWxcIixcbiAgfSxcbiAgZm9yY2VQYXRoU3R5bGU6IHRydWUsXG59KTtcblxuYXN5bmMgZnVuY3Rpb24gbG9jYWxUZXN0KCkge1xuICB0cnkge1xuICAgIC8vIFRlc3QgRHluYW1vREIgY29ubmVjdGlvblxuICAgIGF3YWl0IGR5bmFtb0RCLnNjYW4oe1xuICAgICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5EWU5BTU9EQl9CSUxMU19UQUJMRSB8fCBcInVrLXBvbGl0aWNzLWJpbGxzLWxvY2FsXCIsXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coXCJTdWNjZXNzZnVsbHkgY29ubmVjdGVkIHRvIGxvY2FsIER5bmFtb0RCXCIpO1xuXG4gICAgLy8gVGVzdCBTMyBjb25uZWN0aW9uXG4gICAgYXdhaXQgczNDbGllbnQuc2VuZChuZXcgTGlzdE9iamVjdHNWMkNvbW1hbmQoe1xuICAgICAgQnVja2V0OiBwcm9jZXNzLmVudi5TM19DQUNIRV9CVUNLRVQgfHwgXCJ1ay1wb2xpdGljcy1jYWNoZS1sb2NhbFwiXG4gICAgfSkpO1xuICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB0byBsb2NhbCBTM1wiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNvbm5lY3RpbmcgdG8gbG9jYWwgc2VydmljZXM6XCIsIGVycik7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59XG5cbi8vIFNldCBsb2NhbCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbnByb2Nlc3MuZW52LlJFR0lPTiA9ICdldS13ZXN0LTInO1xucHJvY2Vzcy5lbnYuRFlOQU1PREJfQklMTFNfVEFCTEUgPSAndWstcG9saXRpY3MtYmlsbHMtbG9jYWwnO1xucHJvY2Vzcy5lbnYuRFlOQU1PREJfTUVNQkVSU19UQUJMRSA9ICd1ay1wb2xpdGljcy1tZW1iZXJzLWxvY2FsJztcbnByb2Nlc3MuZW52LlMzX0NBQ0hFX0JVQ0tFVCA9ICd1ay1wb2xpdGljcy1jYWNoZS1sb2NhbCc7XG5wcm9jZXNzLmVudi5MT0dfTEVWRUwgPSAnZGVidWcnO1xuXG5sb2NhbFRlc3QoKS5jYXRjaChjb25zb2xlLmVycm9yKTsiXX0=