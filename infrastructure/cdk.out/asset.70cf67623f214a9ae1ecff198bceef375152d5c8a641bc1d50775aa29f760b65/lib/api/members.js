"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.membersService = void 0;
const aws_sdk_1 = require("aws-sdk");
const dynamoDB = new aws_sdk_1.DynamoDB.DocumentClient();
const MEMBERS_TABLE = process.env.DYNAMODB_MEMBERS_TABLE || '';
exports.membersService = {
    async getMembersWithInterests() {
        try {
            // Fetch from DynamoDB
            const result = await dynamoDB.scan({
                TableName: MEMBERS_TABLE,
            }).promise();
            if (!result.Items) {
                throw new Error('No members found');
            }
            // Process and format the data
            return result.Items.map(item => ({
                id: item.id,
                name: item.name,
                party: item.party,
                house: item.house,
                earnings: item.earnings || [],
                donations: item.donations || []
            }));
        }
        catch (error) {
            console.error('Error fetching members:', error);
            throw error;
        }
    },
    async updateMemberInterests(member) {
        try {
            await dynamoDB.put({
                TableName: MEMBERS_TABLE,
                Item: member
            }).promise();
        }
        catch (error) {
            console.error('Error updating member:', error);
            throw error;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtYmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvYXBpL21lbWJlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EscUNBQW1DO0FBRW5DLE1BQU0sUUFBUSxHQUFHLElBQUksa0JBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUMvQyxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixJQUFJLEVBQUUsQ0FBQztBQW1CbEQsUUFBQSxjQUFjLEdBQUc7SUFDNUIsS0FBSyxDQUFDLHVCQUF1QjtRQUMzQixJQUFJLENBQUM7WUFDSCxzQkFBc0I7WUFDdEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDO2dCQUNqQyxTQUFTLEVBQUUsYUFBYTthQUN6QixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFYixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdEMsQ0FBQztZQUVELDhCQUE4QjtZQUM5QixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDL0IsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNYLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ2pCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksRUFBRTtnQkFDN0IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRTthQUNoQyxDQUFDLENBQUMsQ0FBQztRQUNOLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNoRCxNQUFNLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLHFCQUFxQixDQUFDLE1BQWM7UUFDeEMsSUFBSSxDQUFDO1lBQ0gsTUFBTSxRQUFRLENBQUMsR0FBRyxDQUFDO2dCQUNqQixTQUFTLEVBQUUsYUFBYTtnQkFDeEIsSUFBSSxFQUFFLE1BQU07YUFDYixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDL0MsTUFBTSxLQUFLLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgRHluYW1vREIgfSBmcm9tICdhd3Mtc2RrJztcblxuY29uc3QgZHluYW1vREIgPSBuZXcgRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcbmNvbnN0IE1FTUJFUlNfVEFCTEUgPSBwcm9jZXNzLmVudi5EWU5BTU9EQl9NRU1CRVJTX1RBQkxFIHx8ICcnO1xuXG5pbnRlcmZhY2UgTWVtYmVyIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBwYXJ0eTogc3RyaW5nO1xuICBob3VzZTogJ0NvbW1vbnMnIHwgJ0xvcmRzJztcbiAgZWFybmluZ3M6IHtcbiAgICBhbW91bnQ6IG51bWJlcjtcbiAgICByZWdpc3RlcmVkRGF0ZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIH1bXTtcbiAgZG9uYXRpb25zOiB7XG4gICAgYW1vdW50OiBudW1iZXI7XG4gICAgcmVnaXN0ZXJlZERhdGU6IHN0cmluZztcbiAgICBkb25vcjogc3RyaW5nO1xuICB9W107XG59XG5cbmV4cG9ydCBjb25zdCBtZW1iZXJzU2VydmljZSA9IHtcbiAgYXN5bmMgZ2V0TWVtYmVyc1dpdGhJbnRlcmVzdHMoKTogUHJvbWlzZTxNZW1iZXJbXT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBGZXRjaCBmcm9tIER5bmFtb0RCXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkeW5hbW9EQi5zY2FuKHtcbiAgICAgICAgVGFibGVOYW1lOiBNRU1CRVJTX1RBQkxFLFxuICAgICAgfSkucHJvbWlzZSgpO1xuXG4gICAgICBpZiAoIXJlc3VsdC5JdGVtcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1lbWJlcnMgZm91bmQnKTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJvY2VzcyBhbmQgZm9ybWF0IHRoZSBkYXRhXG4gICAgICByZXR1cm4gcmVzdWx0Lkl0ZW1zLm1hcChpdGVtID0+ICh7XG4gICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgIHBhcnR5OiBpdGVtLnBhcnR5LFxuICAgICAgICBob3VzZTogaXRlbS5ob3VzZSxcbiAgICAgICAgZWFybmluZ3M6IGl0ZW0uZWFybmluZ3MgfHwgW10sXG4gICAgICAgIGRvbmF0aW9uczogaXRlbS5kb25hdGlvbnMgfHwgW11cbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbWVtYmVyczonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG5cbiAgYXN5bmMgdXBkYXRlTWVtYmVySW50ZXJlc3RzKG1lbWJlcjogTWVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGR5bmFtb0RCLnB1dCh7XG4gICAgICAgIFRhYmxlTmFtZTogTUVNQkVSU19UQUJMRSxcbiAgICAgICAgSXRlbTogbWVtYmVyXG4gICAgICB9KS5wcm9taXNlKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIG1lbWJlcjonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn07Il19