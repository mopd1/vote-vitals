"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = handler;
const bills_1 = require("./lib/api/bills");
const logger_1 = require("./lib/utils/logger");
const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token',
    'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
};
// Mock data for testing
const mockMembers = [
    { id: '1', name: 'John Smith', party: 'Conservative', house: 'Commons', totalEarnings: 150000, totalDonations: 75000 },
    { id: '2', name: 'Sarah Wilson', party: 'Labour', house: 'Commons', totalEarnings: 120000, totalDonations: 45000 },
    { id: '3', name: 'David Brown', party: 'Conservative', house: 'Lords', totalEarnings: 200000, totalDonations: 150000 },
];
async function handler(event) {
    try {
        logger_1.logger.info('Received request', {
            path: event.path,
            method: event.httpMethod,
            queryParams: event.queryStringParameters,
            headers: event.headers
        });
        if (event.httpMethod === 'OPTIONS') {
            return {
                statusCode: 200,
                headers: corsHeaders,
                body: ''
            };
        }
        const path = event.path.toLowerCase();
        const queryParams = event.queryStringParameters || {};
        logger_1.logger.debug('Processing path', { path });
        if (path.includes('/health')) {
            return {
                statusCode: 200,
                headers: { 'Content-Type': 'application/json', ...corsHeaders },
                body: JSON.stringify({
                    status: 'ok',
                    timestamp: new Date().toISOString(),
                    region: process.env.REGION,
                    billsTable: process.env.DYNAMODB_BILLS_TABLE,
                    cacheBucket: process.env.S3_CACHE_BUCKET
                })
            };
        }
        if (path.includes('/api/parliament/members/earnings')) {
            return {
                statusCode: 200,
                headers: { 'Content-Type': 'application/json', ...corsHeaders },
                body: JSON.stringify(mockMembers)
            };
        }
        if (path.includes('/api/parliament/bills')) {
            try {
                logger_1.logger.info('Fetching bills', {
                    queryParams,
                    billsTable: process.env.DYNAMODB_BILLS_TABLE,
                    region: process.env.REGION
                });
                const bills = await bills_1.billsService.getBills({
                    page: parseInt(queryParams.page) || 1,
                    limit: parseInt(queryParams.limit) || 20,
                    sessionId: parseInt(queryParams.sessionId) || 58
                });
                return {
                    statusCode: 200,
                    headers: { 'Content-Type': 'application/json', ...corsHeaders },
                    body: JSON.stringify(bills)
                };
            }
            catch (error) {
                logger_1.logger.error('Error fetching bills:', {
                    error,
                    stack: error instanceof Error ? error.stack : undefined,
                    billsTable: process.env.DYNAMODB_BILLS_TABLE,
                    region: process.env.REGION
                });
                return {
                    statusCode: 500,
                    headers: { 'Content-Type': 'application/json', ...corsHeaders },
                    body: JSON.stringify({
                        error: 'Failed to fetch bills',
                        message: error instanceof Error ? error.message : 'Unknown error',
                        stack: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.stack : undefined) : undefined
                    })
                };
            }
        }
        logger_1.logger.warn('Not found', { path });
        return {
            statusCode: 404,
            headers: { 'Content-Type': 'application/json', ...corsHeaders },
            body: JSON.stringify({
                error: 'Not found',
                path,
                availablePaths: ['/health', '/api/parliament/bills', '/api/parliament/members/earnings']
            })
        };
    }
    catch (error) {
        logger_1.logger.error('Unhandled error:', {
            error,
            stack: error instanceof Error ? error.stack : undefined
        });
        return {
            statusCode: 500,
            headers: { 'Content-Type': 'application/json', ...corsHeaders },
            body: JSON.stringify({
                error: 'Internal server error',
                message: error instanceof Error ? error.message : 'Unknown error',
                stack: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.stack : undefined) : undefined
            })
        };
    }
}
//# sourceMappingURL=data:application/json;base64,