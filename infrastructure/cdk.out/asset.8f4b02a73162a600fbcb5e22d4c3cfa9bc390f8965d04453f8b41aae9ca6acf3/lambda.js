"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = handler;
const bills_1 = require("./lib/api/bills");
const members_1 = require("./lib/api/members");
const interests_1 = require("./lib/api/interests");
const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token',
    'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
};
async function handler(event) {
    try {
        if (event.httpMethod === 'OPTIONS') {
            return { statusCode: 200, headers: corsHeaders, body: '' };
        }
        const path = event.path.toLowerCase();
        const params = event.queryStringParameters || {};
        // General members endpoint
        if (path.match(/\/api\/parliament\/members$/)) {
            const members = await members_1.membersService.getMembers({
                party: params.party,
                house: params.house,
                page: params.page ? parseInt(params.page) : undefined,
                limit: params.limit ? parseInt(params.limit) : undefined
            });
            return {
                statusCode: 200,
                headers: { ...corsHeaders, 'Content-Type': 'application/json' },
                body: JSON.stringify(members)
            };
        }
        // Members earnings endpoint
        if (path.includes('/api/parliament/members/earnings')) {
            const interestsApi = new interests_1.InterestsAPI();
            const members = await interestsApi.getAllMembersWithInterests();
            const earningsData = members.items.map(member => ({
                id: member.id,
                name: member.name,
                party: member.party,
                house: member.house,
                totalValue: member.earnings.reduce((sum, e) => sum + e.amount, 0)
            }));
            return {
                statusCode: 200,
                headers: { ...corsHeaders, 'Content-Type': 'application/json' },
                body: JSON.stringify(earningsData)
            };
        }
        // Bills endpoint
        if (path.includes('/api/parliament/bills')) {
            const bills = await bills_1.billsService.getBills({
                page: params.page ? parseInt(params.page) : undefined,
                limit: params.limit ? parseInt(params.limit) : undefined
            });
            return {
                statusCode: 200,
                headers: { ...corsHeaders, 'Content-Type': 'application/json' },
                body: JSON.stringify(bills)
            };
        }
        return {
            statusCode: 404,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            body: JSON.stringify({ error: 'Not found', path })
        };
    }
    catch (error) {
        console.error('Error:', error);
        return {
            statusCode: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            body: JSON.stringify({
                error: 'Internal server error',
                message: error instanceof Error ? error.message : 'Unknown error'
            })
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xhbWJkYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQW9CQSwwQkE0RUM7QUEvRkQsMkNBQStDO0FBQy9DLCtDQUFtRDtBQUNuRCxtREFBbUQ7QUFHbkQsTUFBTSxXQUFXLEdBQUc7SUFDbEIsNkJBQTZCLEVBQUUsR0FBRztJQUNsQyw4QkFBOEIsRUFBRSxzRUFBc0U7SUFDdEcsOEJBQThCLEVBQUUsNkJBQTZCO0NBQzlELENBQUM7QUFVSyxLQUFLLFVBQVUsT0FBTyxDQUFDLEtBQTJCO0lBQ3ZELElBQUksQ0FBQztRQUNILElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUM3RCxDQUFDO1FBRUQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN0QyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMscUJBQXFCLElBQUksRUFBRSxDQUFDO1FBRWpELDJCQUEyQjtRQUMzQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsRUFBRSxDQUFDO1lBQzlDLE1BQU0sT0FBTyxHQUFHLE1BQU0sd0JBQWMsQ0FBQyxVQUFVLENBQUM7Z0JBQzlDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztnQkFDbkIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFrQjtnQkFDaEMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7Z0JBQ3JELEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUss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Q0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGVBQWU7YUFDbEUsQ0FBQztTQUNILENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUV2ZW50LCBBUElHYXRld2F5UHJveHlSZXN1bHQgfSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCB7IGJpbGxzU2VydmljZSB9IGZyb20gJy4vbGliL2FwaS9iaWxscyc7XG5pbXBvcnQgeyBtZW1iZXJzU2VydmljZSB9IGZyb20gJy4vbGliL2FwaS9tZW1iZXJzJztcbmltcG9ydCB7IEludGVyZXN0c0FQSSB9IGZyb20gJy4vbGliL2FwaS9pbnRlcmVzdHMnO1xuaW1wb3J0IHsgUGFybGlhbWVudE1lbWJlciwgSG91c2VUeXBlIH0gZnJvbSAnLi9saWIvdHlwZXMvcGFybGlhbWVudCc7XG5cbmNvbnN0IGNvcnNIZWFkZXJzID0ge1xuICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLFxuICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycyc6ICdDb250ZW50LVR5cGUsQXV0aG9yaXphdGlvbixYLUFtei1EYXRlLFgtQXBpLUtleSxYLUFtei1TZWN1cml0eS1Ub2tlbicsXG4gICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJzogJ0dFVCxQT1NULFBVVCxERUxFVEUsT1BUSU9OUycsXG59O1xuXG5pbnRlcmZhY2UgRWFybmluZ3NEYXRhIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBwYXJ0eTogc3RyaW5nO1xuICBob3VzZTogSG91c2VUeXBlO1xuICB0b3RhbFZhbHVlOiBudW1iZXI7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCk6IFByb21pc2U8QVBJR2F0ZXdheVByb3h5UmVzdWx0PiB7XG4gIHRyeSB7XG4gICAgaWYgKGV2ZW50Lmh0dHBNZXRob2QgPT09ICdPUFRJT05TJykge1xuICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAwLCBoZWFkZXJzOiBjb3JzSGVhZGVycywgYm9keTogJycgfTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXRoID0gZXZlbnQucGF0aC50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IHBhcmFtcyA9IGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycyB8fCB7fTtcblxuICAgIC8vIEdlbmVyYWwgbWVtYmVycyBlbmRwb2ludFxuICAgIGlmIChwYXRoLm1hdGNoKC9cXC9hcGlcXC9wYXJsaWFtZW50XFwvbWVtYmVycyQvKSkge1xuICAgICAgY29uc3QgbWVtYmVycyA9IGF3YWl0IG1lbWJlcnNTZXJ2aWNlLmdldE1lbWJlcnMoe1xuICAgICAgICBwYXJ0eTogcGFyYW1zLnBhcnR5LFxuICAgICAgICBob3VzZTogcGFyYW1zLmhvdXNlIGFzIEhvdXNlVHlwZSxcbiAgICAgICAgcGFnZTogcGFyYW1zLnBhZ2UgPyBwYXJzZUludChwYXJhbXMucGFnZSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGxpbWl0OiBwYXJhbXMubGltaXQgPyBwYXJzZUludChwYXJhbXMubGltaXQpIDogdW5kZWZpbmVkXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBoZWFkZXJzOiB7IC4uLmNvcnNIZWFkZXJzLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KG1lbWJlcnMpXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIE1lbWJlcnMgZWFybmluZ3MgZW5kcG9pbnRcbiAgICBpZiAocGF0aC5pbmNsdWRlcygnL2FwaS9wYXJsaWFtZW50L21lbWJlcnMvZWFybmluZ3MnKSkge1xuICAgICAgY29uc3QgaW50ZXJlc3RzQXBpID0gbmV3IEludGVyZXN0c0FQSSgpO1xuICAgICAgY29uc3QgbWVtYmVycyA9IGF3YWl0IGludGVyZXN0c0FwaS5nZXRBbGxNZW1iZXJzV2l0aEludGVyZXN0cygpO1xuICAgICAgXG4gICAgICBjb25zdCBlYXJuaW5nc0RhdGE6IEVhcm5pbmdzRGF0YVtdID0gbWVtYmVycy5pdGVtcy5tYXAobWVtYmVyID0+ICh7XG4gICAgICAgIGlkOiBtZW1iZXIuaWQsXG4gICAgICAgIG5hbWU6IG1lbWJlci5uYW1lLFxuICAgICAgICBwYXJ0eTogbWVtYmVyLnBhcnR5LFxuICAgICAgICBob3VzZTogbWVtYmVyLmhvdXNlLFxuICAgICAgICB0b3RhbFZhbHVlOiBtZW1iZXIuZWFybmluZ3MucmVkdWNlKChzdW0sIGUpID0+IHN1bSArIGUuYW1vdW50LCAwKVxuICAgICAgfSkpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IHsgLi4uY29yc0hlYWRlcnMsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZWFybmluZ3NEYXRhKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCaWxscyBlbmRwb2ludFxuICAgIGlmIChwYXRoLmluY2x1ZGVzKCcvYXBpL3BhcmxpYW1lbnQvYmlsbHMnKSkge1xuICAgICAgY29uc3QgYmlsbHMgPSBhd2FpdCBiaWxsc1NlcnZpY2UuZ2V0QmlsbHMoe1xuICAgICAgICBwYWdlOiBwYXJhbXMucGFnZSA/IHBhcnNlSW50KHBhcmFtcy5wYWdlKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgbGltaXQ6IHBhcmFtcy5saW1pdCA/IHBhcnNlSW50KHBhcmFtcy5saW1pdCkgOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IHsgLi4uY29yc0hlYWRlcnMsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYmlsbHMpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiA0MDQsXG4gICAgICBoZWFkZXJzOiB7IC4uLmNvcnNIZWFkZXJzLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGVycm9yOiAnTm90IGZvdW5kJywgcGF0aCB9KVxuICAgIH07XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICAgIGhlYWRlcnM6IHsgLi4uY29yc0hlYWRlcnMsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgXG4gICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxufSJdfQ==