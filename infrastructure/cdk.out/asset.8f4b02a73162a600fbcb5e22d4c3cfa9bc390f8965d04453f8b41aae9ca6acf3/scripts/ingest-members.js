"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const dynamoDB = new aws_sdk_1.DynamoDB.DocumentClient({
    region: process.env.REGION || 'eu-west-2'
});
// Initial mock data
const mockMembersData = [
    {
        id: '1',
        name: 'John Smith',
        party: 'Conservative',
        house: 'Commons',
        earnings: [
            {
                amount: 50000,
                registeredDate: '2024-01-15',
                description: 'Consulting work'
            }
        ],
        donations: [
            {
                amount: 25000,
                registeredDate: '2024-01-20',
                donor: 'Company A Ltd'
            }
        ]
    },
    {
        id: '2',
        name: 'Sarah Wilson',
        party: 'Labour',
        house: 'Commons',
        earnings: [
            {
                amount: 30000,
                registeredDate: '2024-01-10',
                description: 'Speaking engagement'
            }
        ],
        donations: [
            {
                amount: 15000,
                registeredDate: '2024-01-25',
                donor: 'Union B'
            }
        ]
    },
    {
        id: '3',
        name: 'David Brown',
        party: 'Liberal Democrats',
        house: 'Commons',
        earnings: [
            {
                amount: 40000,
                registeredDate: '2024-01-05',
                description: 'Advisory role'
            }
        ],
        donations: [
            {
                amount: 20000,
                registeredDate: '2024-02-01',
                donor: 'Foundation C'
            }
        ]
    }
];
async function ingestMembers() {
    const tableName = 'ukpol-dev-1737659189083-members'; // Use the new table name from deployment output
    for (const member of mockMembersData) {
        const params = {
            TableName: tableName,
            Item: {
                PK: `MEMBER#${member.id}`,
                SK: `DETAILS`,
                GSI1PK: `PARTY#${member.party}`,
                GSI1SK: member.name,
                ...member,
                ttl: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60) // 7 days TTL
            }
        };
        try {
            await dynamoDB.put(params).promise();
            console.log(`Ingested member: ${member.name}`);
        }
        catch (error) {
            console.error(`Failed to ingest member ${member.name}:`, error);
        }
    }
}
ingestMembers()
    .then(() => console.log('Data ingestion complete'))
    .catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5nZXN0LW1lbWJlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9pbmdlc3QtbWVtYmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFtQztBQUVuQyxNQUFNLFFBQVEsR0FBRyxJQUFJLGtCQUFRLENBQUMsY0FBYyxDQUFDO0lBQzNDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxXQUFXO0NBQzFDLENBQUMsQ0FBQztBQUVILG9CQUFvQjtBQUNwQixNQUFNLGVBQWUsR0FBRztJQUN0QjtRQUNFLEVBQUUsRUFBRSxHQUFHO1FBQ1AsSUFBSSxFQUFFLFlBQVk7UUFDbEIsS0FBSyxFQUFFLGNBQWM7UUFDckIsS0FBSyxFQUFFLFNBQVM7UUFDaEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsTUFBTSxFQUFFLEtBQUs7Z0JBQ2IsY0FBYyxFQUFFLFlBQVk7Z0JBQzVCLFdBQVcsRUFBRSxpQkFBaUI7YUFDL0I7U0FDRjtRQUNELFNBQVMsRUFBRTtZQUNUO2dCQUNFLE1BQU0sRUFBRSxLQUFLO2dCQUNiLGNBQWMsRUFBRSxZQUFZO2dCQUM1QixLQUFLLEVBQUUsZUFBZTthQUN2QjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLEVBQUUsRUFBRSxHQUFHO1FBQ1AsSUFBSSxFQUFFLGNBQWM7UUFDcEIsS0FBSyxFQUFFLFFBQVE7UUFDZixLQUFLLEVBQUUsU0FBUztRQUNoQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxNQUFNLEVBQUUsS0FBSztnQkFDYixjQUFjLEVBQUUsWUFBWTtnQkFDNUIsV0FBVyxFQUFFLHFCQUFxQjthQUNuQztTQUNGO1FBQ0QsU0FBUyxFQUFFO1lBQ1Q7Z0JBQ0UsTUFBTSxFQUFFLEtBQUs7Z0JBQ2IsY0FBYyxFQUFFLFlBQVk7Z0JBQzVCLEtBQUssRUFBRSxTQUFTO2FBQ2pCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsRUFBRSxFQUFFLEdBQUc7UUFDUCxJQUFJLEVBQUUsYUFBYTtRQUNuQixLQUFLLEVBQUUsbUJBQW1CO1FBQzFCLEtBQUssRUFBRSxTQUFTO1FBQ2hCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE1BQU0sRUFBRSxLQUFLO2dCQUNiLGNBQWMsRUFBRSxZQUFZO2dCQUM1QixXQUFXLEVBQUUsZUFBZTthQUM3QjtTQUNGO1FBQ0QsU0FBUyxFQUFFO1lBQ1Q7Z0JBQ0UsTUFBTSxFQUFFLEtBQUs7Z0JBQ2IsY0FBYyxFQUFFLFlBQVk7Z0JBQzVCLEtBQUssRUFBRSxjQUFjO2FBQ3RCO1NBQ0Y7S0FDRjtDQUNGLENBQUM7QUFFRixLQUFLLFVBQVUsYUFBYTtJQUMxQixNQUFNLFNBQVMsR0FBRyxpQ0FBaUMsQ0FBQyxDQUFFLGdEQUFnRDtJQUV0RyxLQUFLLE1BQU0sTUFBTSxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sTUFBTSxHQUFHO1lBQ2IsU0FBUyxFQUFFLFNBQVM7WUFDcEIsSUFBSSxFQUFFO2dCQUNKLEVBQUUsRUFBRSxVQUFVLE1BQU0sQ0FBQyxFQUFFLEVBQUU7Z0JBQ3pCLEVBQUUsRUFBRSxTQUFTO2dCQUNiLE1BQU0sRUFBRSxTQUFTLE1BQU0sQ0FBQyxLQUFLLEVBQUU7Z0JBQy9CLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSTtnQkFDbkIsR0FBRyxNQUFNO2dCQUNULEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLGFBQWE7YUFDdEU7U0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDO1lBQ0gsTUFBTSxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQywyQkFBMkIsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xFLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQUVELGFBQWEsRUFBRTtLQUNaLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7S0FDbEQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtb0RCIH0gZnJvbSAnYXdzLXNkayc7XG5cbmNvbnN0IGR5bmFtb0RCID0gbmV3IER5bmFtb0RCLkRvY3VtZW50Q2xpZW50KHtcbiAgcmVnaW9uOiBwcm9jZXNzLmVudi5SRUdJT04gfHwgJ2V1LXdlc3QtMidcbn0pO1xuXG4vLyBJbml0aWFsIG1vY2sgZGF0YVxuY29uc3QgbW9ja01lbWJlcnNEYXRhID0gW1xuICB7XG4gICAgaWQ6ICcxJyxcbiAgICBuYW1lOiAnSm9obiBTbWl0aCcsXG4gICAgcGFydHk6ICdDb25zZXJ2YXRpdmUnLFxuICAgIGhvdXNlOiAnQ29tbW9ucycsXG4gICAgZWFybmluZ3M6IFtcbiAgICAgIHtcbiAgICAgICAgYW1vdW50OiA1MDAwMCxcbiAgICAgICAgcmVnaXN0ZXJlZERhdGU6ICcyMDI0LTAxLTE1JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdDb25zdWx0aW5nIHdvcmsnXG4gICAgICB9XG4gICAgXSxcbiAgICBkb25hdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgYW1vdW50OiAyNTAwMCxcbiAgICAgICAgcmVnaXN0ZXJlZERhdGU6ICcyMDI0LTAxLTIwJyxcbiAgICAgICAgZG9ub3I6ICdDb21wYW55IEEgTHRkJ1xuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIGlkOiAnMicsXG4gICAgbmFtZTogJ1NhcmFoIFdpbHNvbicsXG4gICAgcGFydHk6ICdMYWJvdXInLFxuICAgIGhvdXNlOiAnQ29tbW9ucycsXG4gICAgZWFybmluZ3M6IFtcbiAgICAgIHtcbiAgICAgICAgYW1vdW50OiAzMDAwMCxcbiAgICAgICAgcmVnaXN0ZXJlZERhdGU6ICcyMDI0LTAxLTEwJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdTcGVha2luZyBlbmdhZ2VtZW50J1xuICAgICAgfVxuICAgIF0sXG4gICAgZG9uYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGFtb3VudDogMTUwMDAsXG4gICAgICAgIHJlZ2lzdGVyZWREYXRlOiAnMjAyNC0wMS0yNScsXG4gICAgICAgIGRvbm9yOiAnVW5pb24gQidcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBpZDogJzMnLFxuICAgIG5hbWU6ICdEYXZpZCBCcm93bicsXG4gICAgcGFydHk6ICdMaWJlcmFsIERlbW9jcmF0cycsXG4gICAgaG91c2U6ICdDb21tb25zJyxcbiAgICBlYXJuaW5nczogW1xuICAgICAge1xuICAgICAgICBhbW91bnQ6IDQwMDAwLFxuICAgICAgICByZWdpc3RlcmVkRGF0ZTogJzIwMjQtMDEtMDUnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0Fkdmlzb3J5IHJvbGUnXG4gICAgICB9XG4gICAgXSxcbiAgICBkb25hdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgYW1vdW50OiAyMDAwMCxcbiAgICAgICAgcmVnaXN0ZXJlZERhdGU6ICcyMDI0LTAyLTAxJyxcbiAgICAgICAgZG9ub3I6ICdGb3VuZGF0aW9uIEMnXG4gICAgICB9XG4gICAgXVxuICB9XG5dO1xuXG5hc3luYyBmdW5jdGlvbiBpbmdlc3RNZW1iZXJzKCkge1xuICBjb25zdCB0YWJsZU5hbWUgPSAndWtwb2wtZGV2LTE3Mzc2NTkxODkwODMtbWVtYmVycyc7ICAvLyBVc2UgdGhlIG5ldyB0YWJsZSBuYW1lIGZyb20gZGVwbG95bWVudCBvdXRwdXRcblxuICBmb3IgKGNvbnN0IG1lbWJlciBvZiBtb2NrTWVtYmVyc0RhdGEpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSxcbiAgICAgIEl0ZW06IHtcbiAgICAgICAgUEs6IGBNRU1CRVIjJHttZW1iZXIuaWR9YCxcbiAgICAgICAgU0s6IGBERVRBSUxTYCxcbiAgICAgICAgR1NJMVBLOiBgUEFSVFkjJHttZW1iZXIucGFydHl9YCxcbiAgICAgICAgR1NJMVNLOiBtZW1iZXIubmFtZSxcbiAgICAgICAgLi4ubWVtYmVyLFxuICAgICAgICB0dGw6IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApICsgKDcgKiAyNCAqIDYwICogNjApIC8vIDcgZGF5cyBUVExcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGR5bmFtb0RCLnB1dChwYXJhbXMpLnByb21pc2UoKTtcbiAgICAgIGNvbnNvbGUubG9nKGBJbmdlc3RlZCBtZW1iZXI6ICR7bWVtYmVyLm5hbWV9YCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBpbmdlc3QgbWVtYmVyICR7bWVtYmVyLm5hbWV9OmAsIGVycm9yKTtcbiAgICB9XG4gIH1cbn1cblxuaW5nZXN0TWVtYmVycygpXG4gIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdEYXRhIGluZ2VzdGlvbiBjb21wbGV0ZScpKVxuICAuY2F0Y2goY29uc29sZS5lcnJvcik7Il19