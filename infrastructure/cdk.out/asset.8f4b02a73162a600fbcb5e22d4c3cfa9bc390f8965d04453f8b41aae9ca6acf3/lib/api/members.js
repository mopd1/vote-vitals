"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.membersService = void 0;
const aws_sdk_1 = require("aws-sdk");
const dynamoDB = new aws_sdk_1.DynamoDB.DocumentClient();
const MEMBERS_TABLE = process.env.DYNAMODB_MEMBERS_TABLE || '';
exports.membersService = {
    async getMembers(params = {}) {
        try {
            let filterExpression = '';
            const expressionValues = {};
            if (params.party) {
                filterExpression += 'party = :party';
                expressionValues[':party'] = params.party;
            }
            if (params.house) {
                if (filterExpression)
                    filterExpression += ' AND ';
                filterExpression += 'house = :house';
                expressionValues[':house'] = params.house;
            }
            const dbParams = {
                TableName: MEMBERS_TABLE,
                Limit: params.limit || 20,
                ...(filterExpression && {
                    FilterExpression: filterExpression,
                    ExpressionAttributeValues: expressionValues
                })
            };
            const result = await dynamoDB.scan(dbParams).promise();
            return {
                items: (result.Items || []),
                totalItems: result.Count || 0,
                hasMore: !!result.LastEvaluatedKey
            };
        }
        catch (error) {
            console.error('Error fetching members:', error);
            throw error;
        }
    },
    async getMemberById(id) {
        try {
            const result = await dynamoDB.get({
                TableName: MEMBERS_TABLE,
                Key: {
                    PK: `MEMBER#${id}`,
                    SK: 'DETAILS'
                }
            }).promise();
            return result.Item || null;
        }
        catch (error) {
            console.error('Error fetching member:', error);
            throw error;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtYmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvYXBpL21lbWJlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQW1DO0FBR25DLE1BQU0sUUFBUSxHQUFHLElBQUksa0JBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUMvQyxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixJQUFJLEVBQUUsQ0FBQztBQWVsRCxRQUFBLGNBQWMsR0FBRztJQUM1QixLQUFLLENBQUMsVUFBVSxDQUFDLFNBQXNCLEVBQUU7UUFDdkMsSUFBSSxDQUFDO1lBQ0gsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7WUFDMUIsTUFBTSxnQkFBZ0IsR0FBd0IsRUFBRSxDQUFDO1lBRWpELElBQUksTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNqQixnQkFBZ0IsSUFBSSxnQkFBZ0IsQ0FBQztnQkFDckMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUM1QyxDQUFDO1lBRUQsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2pCLElBQUksZ0JBQWdCO29CQUFFLGdCQUFnQixJQUFJLE9BQU8sQ0FBQztnQkFDbEQsZ0JBQWdCLElBQUksZ0JBQWdCLENBQUM7Z0JBQ3JDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDNUMsQ0FBQztZQUVELE1BQU0sUUFBUSxHQUFzQztnQkFDbEQsU0FBUyxFQUFFLGFBQWE7Z0JBQ3hCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUU7Z0JBQ3pCLEdBQUcsQ0FBQyxnQkFBZ0IsSUFBSTtvQkFDdEIsZ0JBQWdCLEVBQUUsZ0JBQWdCO29CQUNsQyx5QkFBeUIsRUFBRSxnQkFBZ0I7aUJBQzVDLENBQUM7YUFDSCxDQUFDO1lBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRXZELE9BQU87Z0JBQ0wsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQXVCO2dCQUNqRCxVQUFVLEVBQUUsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDO2dCQUM3QixPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0I7YUFDbkMsQ0FBQztRQUNKLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNoRCxNQUFNLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFVO1FBQzVCLElBQUksQ0FBQztZQUNILE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLEdBQUcsQ0FBQztnQkFDaEMsU0FBUyxFQUFFLGFBQWE7Z0JBQ3hCLEdBQUcsRUFBRTtvQkFDSCxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUU7b0JBQ2xCLEVBQUUsRUFBRSxTQUFTO2lCQUNkO2FBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRWIsT0FBTyxNQUFNLENBQUMsSUFBd0IsSUFBSSxJQUFJLENBQUM7UUFDakQsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLHdCQUF3QixFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQy9DLE1BQU0sS0FBSyxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREIgfSBmcm9tICdhd3Mtc2RrJztcbmltcG9ydCB7IFBhcmxpYW1lbnRNZW1iZXIsIFBhZ2luYXRlZFJlc3BvbnNlIH0gZnJvbSAnLi4vdHlwZXMvcGFybGlhbWVudCc7XG5cbmNvbnN0IGR5bmFtb0RCID0gbmV3IER5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5jb25zdCBNRU1CRVJTX1RBQkxFID0gcHJvY2Vzcy5lbnYuRFlOQU1PREJfTUVNQkVSU19UQUJMRSB8fCAnJztcblxuaW50ZXJmYWNlIFF1ZXJ5UGFyYW1zIHtcbiAgcGFydHk/OiBzdHJpbmc7XG4gIGhvdXNlPzogJ0NvbW1vbnMnIHwgJ0xvcmRzJztcbiAgcGFnZT86IG51bWJlcjtcbiAgbGltaXQ/OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBNZW1iZXJzUmVzcG9uc2Uge1xuICBpdGVtczogUGFybGlhbWVudE1lbWJlcltdO1xuICB0b3RhbEl0ZW1zOiBudW1iZXI7XG4gIGhhc01vcmU6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBtZW1iZXJzU2VydmljZSA9IHtcbiAgYXN5bmMgZ2V0TWVtYmVycyhwYXJhbXM6IFF1ZXJ5UGFyYW1zID0ge30pOiBQcm9taXNlPE1lbWJlcnNSZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgZmlsdGVyRXhwcmVzc2lvbiA9ICcnO1xuICAgICAgY29uc3QgZXhwcmVzc2lvblZhbHVlczogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuXG4gICAgICBpZiAocGFyYW1zLnBhcnR5KSB7XG4gICAgICAgIGZpbHRlckV4cHJlc3Npb24gKz0gJ3BhcnR5ID0gOnBhcnR5JztcbiAgICAgICAgZXhwcmVzc2lvblZhbHVlc1snOnBhcnR5J10gPSBwYXJhbXMucGFydHk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuaG91c2UpIHtcbiAgICAgICAgaWYgKGZpbHRlckV4cHJlc3Npb24pIGZpbHRlckV4cHJlc3Npb24gKz0gJyBBTkQgJztcbiAgICAgICAgZmlsdGVyRXhwcmVzc2lvbiArPSAnaG91c2UgPSA6aG91c2UnO1xuICAgICAgICBleHByZXNzaW9uVmFsdWVzWyc6aG91c2UnXSA9IHBhcmFtcy5ob3VzZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGJQYXJhbXM6IER5bmFtb0RCLkRvY3VtZW50Q2xpZW50LlNjYW5JbnB1dCA9IHtcbiAgICAgICAgVGFibGVOYW1lOiBNRU1CRVJTX1RBQkxFLFxuICAgICAgICBMaW1pdDogcGFyYW1zLmxpbWl0IHx8IDIwLFxuICAgICAgICAuLi4oZmlsdGVyRXhwcmVzc2lvbiAmJiB7XG4gICAgICAgICAgRmlsdGVyRXhwcmVzc2lvbjogZmlsdGVyRXhwcmVzc2lvbixcbiAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiBleHByZXNzaW9uVmFsdWVzXG4gICAgICAgIH0pXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkeW5hbW9EQi5zY2FuKGRiUGFyYW1zKS5wcm9taXNlKCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zOiAocmVzdWx0Lkl0ZW1zIHx8IFtdKSBhcyBQYXJsaWFtZW50TWVtYmVyW10sXG4gICAgICAgIHRvdGFsSXRlbXM6IHJlc3VsdC5Db3VudCB8fCAwLFxuICAgICAgICBoYXNNb3JlOiAhIXJlc3VsdC5MYXN0RXZhbHVhdGVkS2V5XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBtZW1iZXJzOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcblxuICBhc3luYyBnZXRNZW1iZXJCeUlkKGlkOiBzdHJpbmcpOiBQcm9taXNlPFBhcmxpYW1lbnRNZW1iZXIgfCBudWxsPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGR5bmFtb0RCLmdldCh7XG4gICAgICAgIFRhYmxlTmFtZTogTUVNQkVSU19UQUJMRSxcbiAgICAgICAgS2V5OiB7XG4gICAgICAgICAgUEs6IGBNRU1CRVIjJHtpZH1gLFxuICAgICAgICAgIFNLOiAnREVUQUlMUydcbiAgICAgICAgfVxuICAgICAgfSkucHJvbWlzZSgpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0Lkl0ZW0gYXMgUGFybGlhbWVudE1lbWJlciB8fCBudWxsO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBtZW1iZXI6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59OyJdfQ==